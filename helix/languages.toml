[[language]]
name = "toml"
formatter = { command = "taplo", args = ["format", "-"] }
auto-format = true

[[language]]
name = "python"
# use pylsp-mypy for mypy
# TODO: replace ruff-lsp with pylsp-ruff
language-servers = ["pylsp", "ruff-lsp"]
formatter = { command = "ruff", args = ["format", "-n", "-"] }
auto-format = true


[language-server.pylsp]
command = "pylsp"

[language-server.ruff-lsp]
command = "ruff-lsp"
config = { settings = { organizeImports = true } }

[[language]]
name = "rust"
auto-format = true
language-servers = ["rust-analyzer"]

[language-server.rust-analyzer.config]
check.command = "clippy"
check.features = "all"
completion.fullFunctionSignatures.enable = true
diagnostics.experimental.enable = true
diagnostics.styleLints.enable = true
hover.actions.references.enable = true
hover.memoryLayout.niche = true
inlayHints.bindingModeHints.enable = true
inlayHints.closingBraceHints.minLines = 1
inlayHints.closureCaptureHints.enable = true
inlayHints.closureReturnTypeHints.enable = "always"           # with_block
inlayHints.closureStyle = "rust_analyzer"                     # impl_fn | with_id
inlayHints.discriminantHints.enable = "always"                # fieldless
inlayHints.expressionAdjustmentHints.enable = "always"        # reborrow
inlayHints.implicitDrops.enable = true
inlayHints.lifetimeElisionHints.enable = "always"             # skip_trivial
inlayHints.lifetimeElisionHints.useParameterNames = true
inlayHints.rangeExclusiveHints.enable = true
interpret.tests = true
lens.references.adt.enable = true
lens.references.enumVariant.enable = true
lens.references.method.enable = true
lens.references.trait.enable = true
semanticHighlighting.operator.specialization.enable = true
semanticHighlighting.punctuation.separate.macro.bang = true
semanticHighlighting.punctuation.specialization.enable = true
typing.autoClosingAngleBrackets.enable = true

[[language]]
name = "javascript"
language-servers = [
  "biome",
  { name = "typescript-language-server", except-features = [
    "format",
  ] },
]
formatter = { command = "biome", args = [
  "format",
  "--stdin-file-path",
  "input.js",
  "--indent-style",
  "space",
] }
auto-format = true

[[language]]
name = "typescript"
language-servers = [
  "biome",
  { name = "typescript-language-server", except-features = [
    "format",
  ] },
]
formatter = { command = "biome", args = [
  "format",
  "--stdin-file-path",
  "input.ts",
  "--indent-style",
  "space",
] }
auto-format = true

[[language]]
name = "json"
language-servers = [
  "biome",
  { name = "vscode-json-language-server", except-features = [
    "format",
  ] },
]
formatter = { command = "biome", args = [
  "format",
  "--stdin-file-path",
  "input.json",
  "--indent-style",
  "space",
] }
auto-format = true

[[languages]]
name = "go"
auto-format = true
formatter = { command = "goimports" }
language-servers = ["gopls", "golangci-lint-langserver"]
